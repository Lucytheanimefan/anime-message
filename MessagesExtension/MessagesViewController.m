//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by Lucy Zhang on 2/15/17.
//  Copyright Â© 2017 Lucy Zhang. All rights reserved.
//

#import "MessagesViewController.h"


@interface MessagesViewController ()

@end

@implementation MessagesViewController
MSConversation *conv;

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


- (IBAction)populateMessage:(id)sender {
    MSMessageTemplateLayout *lay = [[MSMessageTemplateLayout alloc]init];
    lay.caption=@"SOME CAPTION HERE";
    lay.trailingCaption=@"Trailing caption";
    lay.trailingSubcaption=@"Trailing subcaption";
    lay.subcaption=@"Subcaption";
    lay.mediaFileURL=[[NSURL alloc]initWithString:@"https://media.giphy.com/media/qw6gaOaGi9s64/giphy.gif"];
    MSMessage *mess = [[MSMessage alloc]initWithSession:[self activeConversation].selectedMessage.session];
    mess.layout = lay;
    
    [[self activeConversation] insertMessage:mess completionHandler:^(NSError *error){
        printf("Should insert message");
        if (error){
            NSLog(@"Hah there was an error: %@", error);
        }
    }];
    
}

#pragma mark - Conversation Handling

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    conv = conversation;
    NSLog(@"didBecomeActiveWithConversation: %@", [conversation description]);
    // Use this method to configure the extension and restore previously stored state.
}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    NSLog(@"willResignActiveWithConversation: %@", [conversation description]);
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    NSLog(@"didReceiveMessage: %@ conversation: %@", [message description], [conversation description]);
    // Use this method to trigger UI updates in response to the message.
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
    printf("DID START STENDING MESSAGE");
    NSLog(@"Conversation: %@",message.summaryText);
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    NSLog(@"Conversation: %@",message.summaryText);
    // Use this to clean up state related to the deleted message.
}

-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called before the extension transitions to a new presentation style.
    
    // Use this method to prepare for the change in presentation style.
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
}

@end

